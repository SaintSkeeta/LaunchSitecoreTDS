<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Glass.Mapper.Sc.Mvc</name>
    </assembly>
    <members>
        <member name="T:Glass.Mapper.Sc.Pipelines.Response.GetModel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Glass.Mapper.Sc.Pipelines.Response.GetModel.ModelTypeField">
            <summary>
            The model type field
            </summary>
        </member>
        <member name="F:Glass.Mapper.Sc.Pipelines.Response.GetModel.ModelField">
            <summary>
            The model field
            </summary>
        </member>
        <member name="M:Glass.Mapper.Sc.Pipelines.Response.GetModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glass.Mapper.Sc.Pipelines.Response.GetModel"/> class.
            </summary>
        </member>
        <member name="M:Glass.Mapper.Sc.Pipelines.Response.GetModel.Process(Sitecore.Mvc.Pipelines.Response.GetModel.GetModelArgs)">
            <summary>
            Processes the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glass.Mapper.Sc.Pipelines.Response.GetModel.GetFromField(Sitecore.Mvc.Presentation.Rendering,Sitecore.Mvc.Pipelines.Response.GetModel.GetModelArgs)">
            <summary>
            Gets from field.
            </summary>
            <param name="rendering">The rendering.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Pipelines.Response.GetModel.GetFromPropertyValue(Sitecore.Mvc.Presentation.Rendering,Sitecore.Mvc.Pipelines.Response.GetModel.GetModelArgs)">
            <summary>
            Gets from property value.
            </summary>
            <param name="rendering">The rendering.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Pipelines.Response.GetModel.GetFromLayout(Sitecore.Mvc.Presentation.Rendering,Sitecore.Mvc.Pipelines.Response.GetModel.GetModelArgs)">
            <summary>
            Gets from layout.
            </summary>
            <param name="rendering">The rendering.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Pipelines.Response.GetModel.GetFromItem(Sitecore.Mvc.Presentation.Rendering,Sitecore.Mvc.Pipelines.Response.GetModel.GetModelArgs)">
            <summary>
            Gets from item.
            </summary>
            <param name="rendering">The rendering.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Pipelines.Response.GetModel.GetObject(System.String,Sitecore.Data.Database,Sitecore.Mvc.Presentation.Rendering)">
            <summary>
            Gets the object.
            </summary>
            <param name="model">The model.</param>
            <param name="db">The db.</param>
            <returns></returns>
            <exception cref="T:Glass.Mapper.MapperException">Failed to find context {0}.Formatted(ContextName)</exception>
        </member>
        <member name="P:Glass.Mapper.Sc.Pipelines.Response.GetModel.ContextName">
            <summary>
            Gets or sets the name of the context.
            </summary>
            <value>
            The name of the context.
            </value>
        </member>
        <member name="P:Glass.Mapper.Sc.Pipelines.Response.GetModelFromView.ContextName">
            <summary>
            Gets or sets the name of the context.
            </summary>
            <value>
            The name of the context.
            </value>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassController.GetContextItem``1(System.Boolean,System.Boolean)">
            <summary>
            Returns the Context Item as strongly typed
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassController.GetDataSourceItem``1(System.Boolean,System.Boolean)">
            <summary>
            Returns the Data Source Item as strongly typed
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassController.GetLayoutItem``1(System.Boolean,System.Boolean)">
            <summary>
            Returns the Layout Item as strongly typed
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassController.GetRenderingItem``1(System.Boolean,System.Boolean)">
            <summary>
            Returns the data source item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="isLazy"></param>
            <param name="inferType"></param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassController.GetControllerItem``1(System.Boolean,System.Boolean)">
            <summary>
            if the rendering context and data source has been set then returns the data source item, otherwise returns the context item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="isLazy"></param>
            <param name="inferType"></param>
            <returns></returns>
        </member>
        <member name="P:Glass.Mapper.Sc.Web.Mvc.GlassController.LayoutItem">
            <summary>
            Returns either the item specified by the DataSource or the current context item
            </summary>
            <value>The layout item.</value>
        </member>
        <member name="P:Glass.Mapper.Sc.Web.Mvc.GlassController.ContextItem">
            <summary>
            Returns either the item specified by the current context item
            </summary>
            <value>The layout item.</value>
        </member>
        <member name="P:Glass.Mapper.Sc.Web.Mvc.GlassController.DataSourceItem">
            <summary>
            Returns the item specificed by the data source only. Returns null if no datasource set
            </summary>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.Editable``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Makes the field editable using the Sitecore Page Editor. Using the specifed service to write data.
            </summary>
            <param name="field">The field that should be made editable</param>
            <param name="parameters"> </param>
            <returns>HTML output to either render the editable controls or normal HTML</returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.Editable``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Object)">
            <summary>
            Makes the field editable using the Sitecore Page Editor. Using the specifed service to write data.
            </summary>
            <typeparam name="T">A class loaded by Glass.Sitecore.Mapper</typeparam>
            <param name="target">The target object that contains the item to be edited</param>
            <param name="field">The field that should be made editable</param>
            <param name="standardOutput">The output to display when the Sitecore Page Editor is not being used</param>
            <returns>HTML output to either render the editable controls or normal HTML</returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.RenderImage``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Boolean,System.Boolean)">
            <summary>
            Renders an image allowing simple page editor support
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The model that contains the image field</param>
            <param name="field">A lambda expression to the image field, should be of type Glass.Mapper.Sc.Fields.Image</param>
            <param name="parameters">Image parameters, e.g. width, height</param>
            <param name="isEditable">Indicates if the field should be editable</param>
            <param name="outputHeightWidth">Indicates if the height and width attributes should be outputted when rendering the image</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.BeginRenderLink``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Boolean)">
            <summary>
            Render HTML for a link with contents
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The model</param>
            <param name="field">The link field to user</param>
            <param name="attributes">Any additional link attributes</param>
            <param name="isEditable">Make the link editable</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.RenderLink``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Boolean,System.String)">
            <summary>
            Render HTML for a link
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The model</param>
            <param name="field">The link field to user</param>
            <param name="attributes">Any additional link attributes</param>
            <param name="isEditable">Make the link editable</param>
            <param name="contents">Content to override the default decription or item name</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.BeginEditFrame(System.String,System.String)">
            <summary>
            Begins the edit frame.
            </summary>
            <param name="buttons">The buttons.</param>
            <param name="dataSource">The data source.</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.BeginEditFrame(System.String)">
            <summary>
            Creates an Edit Frame using the Default Buttons list
            </summary>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.BeginEditFrame">
            <summary>
            Creates an edit frame using the current context item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.RenderImage``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Boolean)">
            <summary>
            Renders an image allowing simple page editor support
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The model that contains the image field</param>
            <param name="field">A lambda expression to the image field, should be of type Glass.Mapper.Sc.Fields.Image</param>
            <param name="parameters">Image parameters, e.g. width, height</param>
            <param name="isEditable">Indicates if the field should be editable</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.Editable(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Makes the field editable using the Sitecore Page Editor. Using the specifed service to write data.
            </summary>
            <param name="field">The field that should be made editable</param>
            <param name="parameters"></param>
            <returns>HTML output to either render the editable controls or normal HTML</returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.Editable(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.Object)">
            <summary>
            Makes the field editable using the Sitecore Page Editor. Using the specifed service to write data.
            </summary>
            <param name="field">The field that should be made editable</param>
            <param name="standardOutput">The output to display when the Sitecore Page Editor is not being used</param>
            <returns>HTML output to either render the editable controls or normal HTML</returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.RenderImage(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.Boolean)">
            <summary>
            Renders an image allowing simple page editor support
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The model that contains the image field</param>
            <param name="field">A lambda expression to the image field, should be of type Glass.Mapper.Sc.Fields.Image</param>
            <param name="parameters">Image parameters, e.g. width, height</param>
            <param name="isEditable">Indicates if the field should be editable</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.BeginRenderLink(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.Boolean)">
            <summary>
            Render HTML for a link with contents
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The model</param>
            <param name="field">The link field to user</param>
            <param name="attributes">Any additional link attributes</param>
            <param name="isEditable">Make the link editable</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.RenderLink(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.Boolean,System.String)">
            <summary>
            Render HTML for a link
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The model</param>
            <param name="field">The link field to user</param>
            <param name="attributes">Any additional link attributes</param>
            <param name="isEditable">Make the link editable</param>
            <param name="contents">Content to override the default decription or item name</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.BeginEditFrame``1(``0,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Returns an Sitecore Edit Frame
            </summary>
            <param name="buttons">The buttons.</param>
            <param name="path">The path.</param>
            <param name="output">The stream to write the editframe output to. If the value is null the HttpContext Response Stream is used.</param>
            <returns>
            GlassEditFrame.
            </returns>
        </member>
        <member name="P:Glass.Mapper.Sc.Web.Mvc.GlassHtmlMvc`1.IsInEditingMode">
            <summary>
            Gets a value indicating whether this instance is in editing mode.
            </summary>
            <value><c>true</c> if this instance is in editing mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Glass.Mapper.Sc.Web.Mvc.GlassView`1">
            <summary>
            
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.GetContextItem``1(System.Boolean,System.Boolean)">
            <summary>
            Returns the Context Item as strongly typed
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.GetDataSourceItem``1(System.Boolean,System.Boolean)">
            <summary>
            Returns the Data Source Item as strongly typed
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.GetLayoutItem``1(System.Boolean,System.Boolean)">
            <summary>
            Returns the Layout Item as strongly typed
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.InitHelpers">
            <summary>
            Inits the helpers.
            </summary>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.Editable``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Makes the field editable using the Sitecore Page Editor. Using the specifed service to write data.
            </summary>
            <param name="field">The field that should be made editable</param>
            <param name="parameters"> </param>
            <returns>HTML output to either render the editable controls or normal HTML</returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.Editable``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Object)">
            <summary>
            Makes the field editable using the Sitecore Page Editor. Using the specifed service to write data.
            </summary>
            <typeparam name="T">A class loaded by Glass.Sitecore.Mapper</typeparam>
            <param name="target">The target object that contains the item to be edited</param>
            <param name="field">The field that should be made editable</param>
            <param name="standardOutput">The output to display when the Sitecore Page Editor is not being used</param>
            <returns>HTML output to either render the editable controls or normal HTML</returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.RenderImage``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Boolean,System.Boolean)">
            <summary>
            Renders an image allowing simple page editor support
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The model that contains the image field</param>
            <param name="field">A lambda expression to the image field, should be of type Glass.Mapper.Sc.Fields.Image</param>
            <param name="parameters">Image parameters, e.g. width, height</param>
            <param name="isEditable">Indicates if the field should be editable</param>
            <param name="outputHeightWidth">Indicates if the height and width attributes should be rendered to the HTML element</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.BeginRenderLink``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Boolean)">
            <summary>
            Render HTML for a link with contents
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The model</param>
            <param name="field">The link field to user</param>
            <param name="attributes">Any additional link attributes</param>
            <param name="isEditable">Make the link editable</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.RenderLink``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Boolean,System.String)">
            <summary>
            Render HTML for a link
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The model</param>
            <param name="field">The link field to user</param>
            <param name="attributes">Any additional link attributes</param>
            <param name="isEditable">Make the link editable</param>
            <param name="contents">Content to override the default decription or item name</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.Editable(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Makes the field editable using the Sitecore Page Editor. Using the specifed service to write data.
            </summary>
            <param name="field">The field that should be made editable</param>
            <param name="parameters"></param>
            <returns>HTML output to either render the editable controls or normal HTML</returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.Editable(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.Object)">
            <summary>
            Makes the field editable using the Sitecore Page Editor. Using the specifed service to write data.
            </summary>
            <param name="field">The field that should be made editable</param>
            <param name="standardOutput">The output to display when the Sitecore Page Editor is not being used</param>
            <returns>HTML output to either render the editable controls or normal HTML</returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.RenderImage(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.Boolean,System.Boolean)">
            <summary>
            Renders an image allowing simple page editor support
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The model that contains the image field</param>
            <param name="field">A lambda expression to the image field, should be of type Glass.Mapper.Sc.Fields.Image</param>
            <param name="parameters">Image parameters, e.g. width, height</param>
            <param name="isEditable">Indicates if the field should be editable</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.BeginRenderLink(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.Boolean)">
            <summary>
            Render HTML for a link with contents
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The model</param>
            <param name="field">The link field to user</param>
            <param name="attributes">Any additional link attributes</param>
            <param name="isEditable">Make the link editable</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.RenderLink(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.Boolean,System.String)">
            <summary>
            Render HTML for a link
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The model</param>
            <param name="field">The link field to user</param>
            <param name="attributes">Any additional link attributes</param>
            <param name="isEditable">Make the link editable</param>
            <param name="contents">Content to override the default decription or item name</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.BeginEditFrame``1(``0,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Returns an Sitecore Edit Frame
            </summary>
            <param name="buttons">The buttons.</param>
            <param name="path">The path.</param>
            <param name="output">The stream to write the editframe output to. If the value is null the HttpContext Response Stream is used.</param>
            <returns>
            GlassEditFrame.
            </returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.BeginEditFrame(System.String,System.String)">
            <summary>
            Begins the edit frame.
            </summary>
            <param name="buttons">The buttons.</param>
            <param name="dataSource">The data source.</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.BeginEditFrame(System.String)">
            <summary>
            Creates an Edit Frame using the Default Buttons list
            </summary>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.GlassView`1.BeginEditFrame">
            <summary>
            Creates an edit frame using the current context item
            </summary>
            <returns></returns>
        </member>
        <member name="P:Glass.Mapper.Sc.Web.Mvc.GlassView`1.GlassHtml">
            <summary>
            
            </summary>
        </member>
        <member name="P:Glass.Mapper.Sc.Web.Mvc.GlassView`1.IsInEditingMode">
            <summary>
            Gets a value indicating whether this instance is in editing mode.
            </summary>
            <value><c>true</c> if this instance is in editing mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Glass.Mapper.Sc.Web.Mvc.GlassView`1.LayoutItem">
            <summary>
            Returns either the item specified by the DataSource or the current context item
            </summary>
            <value>The layout item.</value>
        </member>
        <member name="P:Glass.Mapper.Sc.Web.Mvc.GlassView`1.ContextItem">
            <summary>
            Returns either the item specified by the current context item
            </summary>
            <value>The layout item.</value>
        </member>
        <member name="P:Glass.Mapper.Sc.Web.Mvc.GlassView`1.DataSourceItem">
            <summary>
            Returns the item specificed by the data source only. Returns null if no datasource set
            </summary>
        </member>
        <member name="T:Glass.Mapper.Sc.Web.Mvc.HtmlHelperExtensions">
            <summary>
            HtmlHelperExtensions
            </summary>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.HtmlHelperExtensions.BeginEditFrame(System.Web.Mvc.HtmlHelper)">
            <summary>
            Begins the edit frame.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.HtmlHelperExtensions.BeginEditFrame(System.Web.Mvc.HtmlHelper,Sitecore.Data.ID)">
            <summary>
            Begins the edit frame.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="dataSource">The data source.</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.HtmlHelperExtensions.BeginEditFrame(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Begins the edit frame.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="dataSource">The data source.</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.HtmlHelperExtensions.BeginEditFrame(System.Web.Mvc.HtmlHelper,Sitecore.Data.ID,Sitecore.Data.ID)">
            <summary>
            Begins the edit frame.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="dataSource">The data source.</param>
            <param name="buttons">The buttons.</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.HtmlHelperExtensions.BeginEditFrame(System.Web.Mvc.HtmlHelper,Sitecore.Data.ID,System.String)">
            <summary>
            Begins the edit frame.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="dataSource">The data source.</param>
            <param name="buttons">The buttons.</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.HtmlHelperExtensions.BeginEditFrame(System.Web.Mvc.HtmlHelper,System.String,Sitecore.Data.ID)">
            <summary>
            Begins the edit frame.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="dataSource">The data source.</param>
            <param name="buttons">The buttons.</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.HtmlHelperExtensions.BeginEditFrame(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Begins the edit frame.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="dataSource">The data source.</param>
            <param name="buttons">The buttons.</param>
            <returns></returns>
        </member>
        <member name="M:Glass.Mapper.Sc.Web.Mvc.HtmlHelperExtensions.BeginEditFrame(System.Web.Mvc.HtmlHelper,Sitecore.Web.UI.WebControls.EditFrame)">
            <summary>
            Begins the edit frame.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="editFrame">The edit frame.</param>
            <returns></returns>
        </member>
    </members>
</doc>
